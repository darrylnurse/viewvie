const queryVector = require("./query-vector");
const createVectorObjects = require("./fake-vectors.js");

async function processVectors(vectors, threshold, threadLimit){
  // filLs array with placeholder resolved promises
  // this will allow vectors to be processed concurrently
  // thread limit determines the amount of concurrent processes
  const threader = new Array(threadLimit).fill(Promise.resolve());

  async function processSingle(vector){
    const queryResult = await queryVector([...vector.values]);
    // threshold is to ensure similarity between vectors
    // if similarity score does not meet threshold, return null
    if(queryResult.score < threshold) return null;
    else return queryResult.metadata.movieTitle;
  }

  const results = [];
  for(const vector of vectors){
    // waits till threader finishes resolving the next promise before processing the next vector
    const turn = threader.shift(); // -> Promise.resolve()
    // queues new process by chaining it to the resolved promise
    const newPromise = turn.then(() => processSingle(vector));
    // stores the new promise in results, which may still be pending
    results.push(newPromise);
    // pushes new promise to the back of the threader, maintaining the concurrency limit
    threader.push(newPromise);
  }

  // waits for every element in results to resolve before returning their fulfilled values
  return Promise.all(results);
}

async function queryAlgorithm(frameVectors, threshold){
  const titles = await processVectors(frameVectors, threshold, 50);
  return titles.reduce((nextMap, title) => {
    // checks if title exists, then if acc.get(title) is undefined, it sets the frequency to 1
    // if not, it increments
    if (title) nextMap.set(title, (nextMap.get(title) || 0) + 1);
    // new iteration of the Map is returned
    return nextMap;
    // initial value for nextMap
  }, new Map()); //sets
}

const manualTestVectors = [ //should return map with mostly 'Ponyo'
  {values :[0.8011024, 0.468438983, 0.969593108, 0.511824071, 0.0308843218, 0.270064592, 0.251680851, 0.783683956, 0.0568878651, 0.497462571, 0.582094848, 0.991890609, 0.826934278, 0.89302057, 0.170556352, 0.933723629, 0.629273474, 0.486717284, 0.0926899463, 0.881422639, 0.994002104, 0.526435852, 0.782358289, 0.213527173, 0.980440795, 0.458928674, 0.715353668, 0.0633967072, 0.472299099, 0.638928056, 0.495273232, 0.630441427, 0.342139542, 0.0996317118, 0.210374191, 0.995921791, 0.648633599, 0.0710791796, 0.802604139, 0.521755457, 0.300452799, 0.372014791, 0.473808, 0.625603616, 0.926515, 0.869332314, 0.613470256, 0.628574789, 0.247719303, 0.324658096, 0.364166588, 0.447394192, 0.470773488, 0.715760171, 0.231456056, 0.505936146, 0.174099684, 0.927189469, 0.714870334, 0.627399445, 0.660844564, 0.546648681, 0.112686612, 0.0805268809, 0.597987831, 0.564504445, 0.522926033, 0.617973387, 0.263174772, 0.953150153, 0.845515132, 0.737800121, 0.848716378, 0.0661881343, 0.685726, 0.106710725, 0.210601211, 0.930288732, 0.997004092, 0.731997311, 0.230088651, 0.865245759, 0.0587146468, 0.0754671097, 0.293821245, 0.58454448, 0.746355355, 0.570390463, 0.736520767, 0.809603751, 0.117260829, 0.644002736, 0.654827118, 0.211213291, 0.571995, 0.740609348, 0.679415762, 0.369591683, 0.625988185, 0.717165411]},
  {values: [0.131920934, 0.952223778, 0.998063087, 0.367755383, 0.0572952628, 0.710892498, 0.302955985, 0.843289196, 0.968478262, 0.0628925115, 0.854560554, 0.564672291, 0.909640074, 0.803516328, 0.0274680164, 0.406645983, 0.797603786, 0.490702689, 0.269106984, 0.250908464, 0.504093945, 0.790323794, 0.193768024, 0.611012697, 0.8633129, 0.785521448, 0.996150672, 0.702104211, 0.816872776, 0.374889672, 0.45203194, 0.00176068605, 0.667534649, 0.790675581, 0.345449448, 0.880403697, 0.954465806, 0.0485979803, 0.167786226, 0.886767, 0.199092314, 0.766941309, 0.874896944, 0.635362148, 0.728212416, 0.768788338, 0.777716041, 0.0729587078, 0.218596548, 0.22828199, 0.729546785, 0.838896275, 0.191696584, 0.822481334, 0.301502794, 0.891152203, 0.830520034, 0.839916587, 0.568013966, 0.816755593, 0.494781, 0.657150269, 0.748679042, 0.329326, 0.646771729, 0.335042804, 0.391059726, 0.155564949, 0.238036111, 0.606900752, 0.963370919, 0.472810298, 0.404772907, 0.0463767275, 0.827061236, 0.149732053, 0.531091273, 0.897426248, 0.219345987, 0.430562437, 0.656256676, 0.930379093, 0.681357682, 0.267460048, 0.350373268, 0.698026717, 0.260601401, 0.810556233, 0.143877909, 0.0549479, 0.610825896, 0.208840325, 0.518194318, 0.186571971, 0.673294783, 0.940552831, 0.43301481, 0.252748191, 0.965580404, 0.501059]},
  {values: [0.898458898, 0.399979502, 0.272396773, 0.19717142, 0.350968033, 0.547872066, 0.234754324, 0.483777881, 0.400210232, 0.519201219, 0.0338622853, 0.145641, 0.961091518, 0.493953, 0.493300825, 0.864123344, 0.635803699, 0.566686869, 0.942931294, 0.150804207, 0.391905218, 0.53574574, 0.0673940331, 0.469332278, 0.995475352, 0.167236716, 0.593092918, 0.0315451697, 0.324924827, 0.999741197, 0.484973729, 0.344792426, 0.856338859, 0.00745282602, 0.0961486623, 0.583946764, 0.846569717, 0.460926861, 0.326736957, 0.517684, 0.707168162, 0.253353089, 0.656671703, 0.221926525, 0.440293461, 0.1062112, 0.375139385, 0.977165341, 0.199859381, 0.344918191, 0.360030144, 0.170353681, 0.484033614, 0.228508651, 0.0881983638, 0.390857905, 0.678664386, 0.544837, 0.394273877, 0.813461065, 0.740518391, 0.291917294, 0.232225507, 0.0814104751, 0.74341166, 0.964061618, 0.0806381777, 0.418474495, 0.0418060273, 0.569355726, 0.44932577, 0.831760168, 0.0970366076, 0.549224555, 0.54813385, 0.0430826023, 0.379421055, 0.802583516, 0.383917183, 0.661615372, 0.67298758, 0.723415732, 0.248123735, 0.439742506, 0.495014757, 0.667557716, 0.761920094, 0.340803832, 0.487907976, 0.229660735, 0.237152815, 0.483863592, 0.212086573, 0.154158875, 0.882886767, 0.224193498, 0.94236064, 0.4265185, 0.258240104, 0.941017866]},
  {values: [0.864348173, 0.267074257, 0.908898175, 0.550932884, 0.196096569, 0.787039161, 0.387554854, 0.454797328, 0.240708947, 0.810401201, 0.0210917722, 0.781481, 0.27889365, 0.311345905, 0.468308926, 0.881434798, 0.252490103, 0.0327711776, 0.605494857, 0.833490252, 0.644051433, 0.246201336, 0.210776404, 0.608455241, 0.258329213, 0.20721063, 0.162346274, 0.588956952, 0.10204564, 0.360573828, 0.441233, 0.046917282, 0.27587384, 0.0659602806, 0.528106928, 0.884519339, 0.616287, 0.692357123, 0.841489851, 0.557140768, 0.249998644, 0.361314416, 0.243428409, 0.774933875, 0.00965278782, 0.795903146, 0.752499044, 0.28528598, 0.662728786, 0.435275912, 0.503965139, 0.341601759, 0.811611235, 0.992028534, 0.971321762, 0.584332347, 0.154013306, 0.439132631, 0.798691154, 0.494116306, 0.81657052, 0.488470882, 0.376735032, 0.113613196, 0.110665053, 0.692643642, 0.706506073, 0.818726361, 0.0368517302, 0.464476317, 0.896511197, 0.897924125, 0.695855319, 0.888634741, 0.16691795, 0.943043053, 0.34083873, 0.571049094, 0.657502234, 0.276670039, 0.763698876, 0.810251594, 0.772931874, 0.616698861, 0.926102817, 0.648538351, 0.916831136, 0.485037655, 0.378026783, 0.639711797, 0.358314246, 0.877707303, 0.567133069, 0.626169801, 0.216185898, 0.490665644, 0.708210051, 0.524176896, 0.302692562, 0.443110704]},
  {values: [0.761270285, 0.597909868, 0.800597668, 0.58933723, 0.160164073, 0.460809976, 0.662398636, 0.866520643, 0.0813321322, 0.863320351, 0.322081476, 0.516352594, 0.243972272, 0.307772398, 0.0994603187, 0.864225864, 0.825695038, 0.876199245, 0.580374956, 0.620826, 0.420291185, 0.830909252, 0.968411326, 0.6392681, 0.0983981341, 0.309347153, 0.22137399, 0.147759885, 0.380520821, 0.220458642, 0.380135804, 0.905149162, 0.549011111, 0.179432809, 0.366475195, 0.125916988, 0.787361801, 0.101908132, 0.768024623, 0.162447199, 0.32926628, 0.704062283, 0.458665133, 0.542962193, 0.94534868, 0.229782537, 0.467777431, 0.315378338, 0.837830186, 0.294765621, 0.632118165, 0.233101398, 0.645892441, 0.912818789, 0.0618418828, 0.375148624, 0.105075151, 0.81505096, 0.0445308574, 0.36175403, 0.227305412, 0.0533845499, 0.532131851, 0.906861126, 0.764223933, 0.996501088, 0.786445737, 0.910131395, 0.867996752, 0.952349961, 0.659915566, 0.329602271, 0.747247219, 0.0404883325, 0.950175762, 0.694241941, 0.464665949, 0.647755742, 0.620875716, 0.0802803338, 0.35849005, 0.347366393, 0.0835965499, 0.255586058, 0.285164773, 0.706012189, 0.0848407075, 0.047529, 0.485395879, 0.253812611, 0.226184383, 0.644483745, 0.980269313, 0.96994859, 0.173613191, 0.386442184, 0.398829728, 0.0501976348, 0.327140421, 0.697927713]},
  {values: [0.999854565, 0.143655136, 0.822920918, 0.59830606, 0.209197938, 0.540235639, 0.635648549, 0.574151456, 0.110169314, 0.644152403, 0.602921546, 0.344503641, 0.536449, 0.555844, 0.725565, 0.90431267, 0.25058037, 0.974824607, 0.553342, 0.720044494, 0.476694822, 0.765811563, 0.398647934, 0.998697, 0.456882864, 0.298202544, 0.33991316, 0.407226145, 0.0522773862, 0.73659271, 0.43893069, 0.455564141, 0.719668508, 0.844665527, 0.898179889, 0.575094223, 0.347687185, 0.299913079, 0.886566341, 0.293806672, 0.622946262, 0.607191265, 0.313708812, 0.0520481, 0.772175312, 0.532997727, 0.229858607, 0.589309096, 0.0796463117, 0.773673117, 0.601165891, 0.243637934, 0.738599062, 0.315510392, 0.0569179766, 0.507088184, 0.785760343, 0.919487476, 0.681663454, 0.806289256, 0.0914489254, 0.602078795, 0.251592338, 0.989819109, 0.236144826, 0.052343443, 0.0912815705, 0.591515481, 0.899419, 0.651846111, 0.453058034, 0.863045156, 0.476744503, 0.42147252, 0.164147377, 0.689530671, 0.26809302, 0.98841548, 0.456825674, 0.919959486, 0.82723546, 0.931126654, 0.0515618324, 0.240764141, 0.22870779, 0.670317769, 0.290222377, 0.504990458, 0.405070096, 0.644390583, 0.253956348, 0.361322612, 0.674093962, 0.266258746, 0.500493526, 0.0415835716, 0.735410213, 0.873805523, 0.139340833, 0.822853327]}
]
// runs the algorithm
async function findMovie() {
  const testVectors = createVectorObjects(450, 100,"movieTitle", "Amongus the Movie");
  // threshold should be between 0 and 1, preferably a high number
  // with larger dimensions threshold might be slightly lower
  return queryAlgorithm(testVectors, 0.80);
}
// 450 frames seems to be a sweet spot
// it takes around 25 seconds to execute
// and gives users about 15 seconds of footage to upload

const start = performance.now();
findMovie().then(result => {
  const end = performance.now();
  console.log(result, "\n", (end - start)/1000, "seconds");
});