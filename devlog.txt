- hey guys
- please read
- if you want
- (i want you to)
- in package.json directly in backend directory, type is set to COMMONJS (require statements)
- this is for microservices files
- in database directory, it is set to MODULE (import statements)
- just something to bear in mind
- embedder file should actually probably be in database because of this.
- files between modules and database dont actually interact
- i should totes fix this eventually where microservices has its own package.json
- eventually..
- lol i did it

- üòù
- output file is in gitignore because it can get very large and is often deleted and recreated
- instructions to clear output are in video splitter file

- eventually endpoint of backend to return to front end will be a single string =)
- a few functions will have an optional parameter of metadata (probably an object : {"movieName" : "Fight Club"})
- so that overall system flow can be used for admin and user
- admin -> upload video -> beep bop *gear sounds* -> uploaded to backend WITH metadata
- user -> upload video -> beep bop *softer gear sounds* -> This movie is Fight Club! (metadata is not necessary)

- trying to work on the edge case of videos with black borders ‚ùóissue
- it is quite complex
- i would need to run ffplay in bash (it has no node support like ffmpeg)
- and get those values to put into my ffmpeg call
- maybe use child_process to run it and harvest the crop info using cropdetect
- maybe look into it in the future

- backend
- run express server to handle images
- serves images to chokidar which watches the server directory
- server receives images from video-splitter
- for now i will implement server for videos
- frontend -> post method -> server -> processing -> etc.

- frontend
- throws error if upload is not a video
- we can include image types later
- display error on front end ‚ùóissue
- lets do a route that contains the upload component and an error component
- after causing exception there is an ok button that returns you to upload page
- i included image types

- if splitting while uploading doesn't work then i will
- (die)
- setup a dir watcher for uploading
- IT WORKED RAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH ü¶Öü¶Öü¶Öü¶Öü¶Ö

- got a bunch of git errors because i globally replaces the word output with upload??
- silly git

- tasks fo today
- test old-spawn-embedder.js command like input ‚úÖ
- package json script to run everything ‚úÖ
- routes for frontend (admin & user)

- i should have put dates for all these logs...
- admin and user pages use different server routes
- wait
- how about
- admin and user have different upload and output directories
- two different emitters for each directory
- work with emitter file to export a function that returns an emitter
- in video-server, we check the current path, /admin or /user and send to different directories based on that?
- ^ done, now just need to do two different emitters
- emitters should go in video-server file
- put pinecone in there too !
- could totally just rename that to server and put it in backend root
- i could also totally just make admin -> uploads into admin-uploads (denest the dir)
- later

- lets add emitter to video-server

- three things for like Friday
- EMBEDDER
- DUAL EMITTERS
- QUERY COMPARE EMBEDDINGS

- PYTHON VIRTUAL ENVIRONMENT!!!

- dual emitters time
- i can change all requires to imports ‚ùóissue
- looking like a git issue for an intern
- remember to still set limit for user uploads! (stretch...) ‚ùóissue

- it seems like the emitter still emits when things are deleted (LOL) using npm run clear-media ‚ùóissue
- lets upsert some more fake vectors and test our weird algo
- i THINK this is O(n) (could be wrongsies lol)
- iterates over each embedding generated from a user video
- queries top k = 1 most similar vector
- checks if score is above threshold, if it is, add vector from database to pool
- if it isnt, dont add it
- at the same time, construct frequency map of metadata movie title of each vector from db
- at the end, return the most frequent one
- it should be that movie!
- if the pool is below a certain ratio, return not found?
- this would need to be investigated mucho

- movies having different numbers of vectors in the database can skew results ‚ùóissue
- for mvp, movies in database should all be the same length
- just to test functionality
- work on front-end routes
- work on sending data to front-end
- usecontext to stop from verifying admin
- there was a goofy solution for this lol ‚ùóissue

- how cool would an api that matches the movie name to a picture be ???
- (very cool)
- could make routes cleaner ‚ùóissue
- make routing button component ‚ùóissue

- batch processing ! :D
- find absolute path of path

- we can actually put the files for the virtual server in the project maybe?

- reduced fps to 24 for efficiency (also movies lol)
- database to hold split frames instead of chokidar ‚ùóissue
- check for new entries in database
- make admin results match effect of user results
- leave toji video for demo...